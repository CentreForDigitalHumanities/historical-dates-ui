{"version":3,"sources":["lib/roman-number.tsx","lib/date.tsx","lib/holiday.tsx","lib/roman-date.tsx","lib/date-annotator.tsx","lib/index.ts","App.js","index.js"],"names":["RomanNumber","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","parseRomanNumber","value","inherits","createClass","key","nextProps","setState","className","concat","type","trimLeft","text","react","spellCheck","placeholder","onKeyDown","keydown","bind","onChange","change","event","keyCode","shiftNumber","target","increase","_this2","prevState","parsed","newValue","vals","toRomanNumber","toString","numeric","cleaned","toUpperCase","replace","trim","test","parseInt","fromRomanNumber","error","InvalidDateException","React","defaultProps","PlainDate","defineProperty","name","newState","parseState","assign","valid","changeYear","year","yearText","calendar","date","createDate","month","day","_this$state","selectClassName","inputClassName","days","map","dateDay","undefined","dateMonth","index","roman_number_RomanNumber","push","Holiday","newProps","yearValue","_this3","validYear","arguments","length","calcEaster","sunday","RomanDateComponent","yearType","RomanDate","toDate","keys","RomanDays","romanDay","toConsumableArray","RomanTexts","romanText","RomanMonths","romanMonth","DateAnnotatorComponent","clearOffsetDays","setDerivedState","objectSpread","offsetDays","holiday","roman","gregorianDate","toGregorian","julianDate","toJulian","get","fromDate","nextState","offsetDate","addDays","equals","emitState","deriveState","liveProps","foundDate","createDateFromString","exception","fromString","editor","_this4","displayCalendar","date_PlainDate","data","holiday_Holiday","roman_date_RomanDateComponent","offsetDaysField","offsetDateDisplay","checked","e","String","prototype","shim","App","changeText","assertThisInitialized","displayState","react_default","a","createElement","date_annotator_DateAnnotatorComponent","JSON","stringify","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1a76c89f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { fromRomanNumber, toRomanNumber, InvalidDateException } from 'historical-dates';\n\ntype RomanNumberProps = {\n    className: string,\n    placeholder?: string,\n    value: string | number,\n    onChange: (state: RomanNumberState) => void\n}\n\nexport type RomanNumberState = {\n    type: 'roman' | 'arabic' | 'invalid',\n    text: string,\n    value: number\n}\n\nexport class RomanNumber extends React.Component<RomanNumberProps, RomanNumberState> {\n    static defaultProps = {\n        className: '',\n        value: '',\n        onChange: () => { }\n    }\n\n    constructor(props: RomanNumberProps) {\n        super(props);\n        this.state = RomanNumber.parseRomanNumber(props.value);\n    }\n\n    componentWillReceiveProps(nextProps: RomanNumberProps) {\n        this.setState(() => {\n            return RomanNumber.parseRomanNumber(nextProps.value);\n        });\n    }\n\n    render() {\n        const className = `${this.props.className} ${this.state.type !== 'invalid' ? \"input\" : \"input is-danger\"}`.trimLeft();\n        const value = this.state.text;\n        return (\n            <input spellCheck={false}\n                className={className}\n                type=\"text\"\n                value={value}\n                placeholder={this.props.placeholder}\n                onKeyDown={this.keydown.bind(this)}\n                onChange={this.change.bind(this)} />\n        )\n    }\n\n    private keydown(event: React.KeyboardEvent<HTMLInputElement>) {\n        switch (event.keyCode) {\n            // down\n            case 40:\n                this.shiftNumber(true);\n                break;\n\n            // up\n            case 38:\n                this.shiftNumber(false);\n                break;\n        }\n    }\n\n    private change(event: React.ChangeEvent<HTMLInputElement>) {\n        this.props.onChange(RomanNumber.parseRomanNumber(event.target.value));\n    }\n\n    private shiftNumber(increase: boolean) {\n        this.setState((prevState) => {\n            if (prevState.type === 'invalid') {\n                return {} as any;\n            }\n            const parsed = RomanNumber.parseRomanNumber(prevState.text);\n            if (parsed.type === 'invalid') {\n                return {} as any;\n            }\n\n            const newValue = parsed.value + (increase ? 1 : -1);\n            const vals = {\n                text: parsed.type === 'roman' && newValue >= 0\n                    ? toRomanNumber(newValue)\n                    : newValue.toString(),\n                numeric: newValue\n            };\n\n            this.props.onChange(RomanNumber.parseRomanNumber(vals.text));\n\n            return vals;\n        });\n    }\n\n    static parseRomanNumber(text: string | number): RomanNumberState {\n        //  \\. is correct\n        // eslint-disable-next-line\n        let cleaned = `${text}`.toUpperCase().replace(/[\\. ]/g, '').trim();\n        if (/^-?[0-9]+$/.test(cleaned)) {\n            // plain number\n            return { type: 'arabic', text: text.toString(), value: parseInt(cleaned) };\n        }\n        try {\n            return { type: 'roman', text: (text || '').toString(), value: fromRomanNumber(cleaned) || 0 };\n        } catch (error) {\n            if (error instanceof InvalidDateException) {\n                return { type: 'invalid', text: text.toString(), value: 0 };\n            } else {\n                throw error;\n            }\n        }\n    }\n}\n","import * as React from 'react';\nimport { createDate, InvalidDateException } from 'historical-dates';\nimport { RomanNumber, RomanNumberState } from './roman-number';\n\nexport type DateProps = {\n    onChange: (value: DateProps) => void,\n    calendar: 'gregorian' | 'julian',\n    day: number | undefined,\n    month: number | undefined,\n    year: number | undefined,\n    yearText: string,\n    valid?: boolean\n}\n\n/**\n * Extremely primitive date component: with easy input of old years (1500ish)\n */\nexport class PlainDate extends React.Component<DateProps, DateProps> {\n    static defaultProps = {\n        onChange: function () { },\n        calendar: 'gregorian',\n        valid: true\n    }\n\n    constructor(props: DateProps) {\n        super(props);\n        this.state = Object.assign({}, props, { valid: true });\n    }\n\n    componentWillReceiveProps(nextProps: DateProps) {\n        this.setState((prevState, props) => {\n            if (prevState.calendar !== nextProps.calendar) {\n                nextProps = this.parseState(nextProps);\n                // if the calendar changes, the date needs to be recalculated\n                props.onChange(nextProps);\n            }\n            return nextProps;\n        });\n    }\n\n    change = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        let newValue = {\n            [event.target.name]: parseInt(event.target.value.replace(/[^0-9]/g, '')) || 0\n        };\n        this.setState((prevState, props) => {\n            let newState = this.parseState(\n                Object.assign({},\n                    prevState,\n                    newValue));\n            if (newState.valid) {\n                props.onChange(newState);\n            }\n            return newState;\n        });\n    }\n\n    changeYear = (year: RomanNumberState) => {\n        this.setState((prevState, props) => {\n            let newState = this.parseState(\n                Object.assign({},\n                    prevState,\n                    year.type !== 'invalid' ?\n                        {\n                            year: year.value,\n                            yearText: year.text,\n                            valid: true\n                        } : {\n                            valid: false\n                        }));\n            if (newState.valid) {\n                props.onChange(newState);\n            }\n            return newState;\n        });\n    }\n\n    parseState(newState: DateProps) {\n        try {\n            let date = createDate(newState.year, newState.month, newState.day, newState.calendar);\n            return Object.assign({}, newState, { date, valid: true });\n        } catch (error) {\n            if (error instanceof InvalidDateException) {\n                return Object.assign({}, newState, { valid: false });\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    render() {\n        const {\n            day,\n            month,\n            yearText,\n            valid\n        } = this.state;\n        const selectClassName = valid ? \"select\" : \"select is-danger\",\n            inputClassName = valid ? \"input\" : \"input is-danger\";\n        return (\n            <div className=\"field has-addons\">\n                <div className=\"control\">\n                    <div className={selectClassName}>\n                        <select name='day' value={day} onChange={this.change}>\n                            {\n                                this.days().map(dateDay =>\n                                    <option key={dateDay || 0} value={dateDay}>{dateDay === undefined ? '' : `${dateDay}`}</option>)\n                            }\n                        </select>\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <div className={selectClassName}>\n                        <select name='month' value={month} onChange={this.change}>\n                            {\n                                ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((dateMonth, index) =>\n                                    <option key={index} value={index === 0 ? undefined : index}>{dateMonth}</option>)\n                            }\n                        </select>\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <RomanNumber className={inputClassName} value={yearText} onChange={this.changeYear} />\n                </div>\n            </div>\n        )\n    }\n\n    days() {\n        let days: (number | undefined)[] = [undefined];\n        for (let day = 1; day < 32; day++) {\n            days.push(day);\n        }\n        return days;\n    }\n}\n","import * as React from 'react'\nimport { createDate, Calendar, calcEaster, HistoricalDate, InvalidDateException } from 'historical-dates';\nimport { RomanNumber, RomanNumberState } from './roman-number';\n\nexport type HolidayDay = 'easter' | 'septuagesima' | 'ashWednesday' | 'ascensionDay' | 'pentecost' | 'trinitySunday' | 'corpusChristi' | 'adventSunday' | 'unknown';\nexport type HolidayProps = {\n    onChange: (value: HolidayProps) => void,\n    day: HolidayDay,\n    year: number | string,\n    calendar: Calendar,\n    valid?: boolean,\n    readonly date?: HistoricalDate\n}\n\nexport class Holiday extends React.Component<HolidayProps, HolidayProps> {\n    static defaultProps = {\n        onChange: function () { },\n        day: 'easter',\n        calendar: 'gregorian',\n        valid: true\n    }\n\n    constructor(props: HolidayProps) {\n        super(props);\n        this.state = Object.assign({}, props);\n    }\n\n    componentWillReceiveProps(nextProps: HolidayProps) {\n        this.setState((prevState, props) => {\n            nextProps = Object.assign({}, props, prevState, nextProps);\n            let yearValue: number;\n            if (prevState.calendar !== nextProps.calendar) {\n                let parsed = this.parseState(nextProps, props);\n                yearValue = parsed.yearValue;\n                nextProps = parsed.newState;\n            } else {\n                yearValue = RomanNumber.parseRomanNumber(nextProps.year).value;\n            }\n\n            if (RomanNumber.parseRomanNumber(prevState.year).value === yearValue) {\n                nextProps.year = prevState.year;\n            }\n            return nextProps;\n        });\n    }\n\n    change = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        let newProps = { [event.target.name]: event.target.value };\n\n        this.setState((prevState, props) => {\n            let newState = Object.assign({}, props, prevState, newProps);\n            return this.parseState(newState, props).newState;\n        });\n    }\n\n    changeYear(state: RomanNumberState) {\n        this.setState((prevState, props) => {\n            let newState = Object.assign({}, props, prevState, { year: state.text, valid: state.type !== 'invalid' });\n            let vars = this.parseState(newState, props, state.type !== 'invalid').newState;\n            return vars;\n        });\n    }\n\n    parseState(newState: HolidayProps, props: HolidayProps, validYear = true) {\n        let date: HistoricalDate;\n\n        const year = newState.year.toString();\n        const yearValue = RomanNumber.parseRomanNumber(year).value;\n        if (validYear) {\n            try {\n                switch (newState.day) {\n                    case 'easter':\n                        date = calcEaster(yearValue, newState.calendar).sunday;\n                        break;\n\n                    case 'unknown':\n                        date = createDate(yearValue, 1, 1, newState.calendar);\n                        break;\n\n                    default:\n                        date = calcEaster(yearValue, newState.calendar)[newState.day];\n                        break;\n                }\n            }\n            catch (error) {\n                if (error instanceof InvalidDateException) {\n                    newState.valid = false;\n                    return { newState, yearValue };\n                } else {\n                    throw error;\n                }\n            }\n\n            newState = Object.assign(newState, { year, date, valid: validYear });\n            props.onChange(newState);\n        }\n\n        return { newState, yearValue };\n    }\n\n    render() {\n        const {\n            day,\n            year,\n            valid\n        } = this.state;\n        return (\n            <div className=\"field has-addons\">\n                <div className=\"control\">\n                    <div className=\"select\">\n                        <select name='day' value={day} onChange={this.change}>\n                            <option value=\"easter\">Easter</option>\n                            <option value=\"septuagesima\">Septuagesima</option>\n                            <option value=\"ashWednesday\">Ash Wednesday</option>\n                            <option value=\"ascensionDay\">Ascension Day</option>\n                            <option value=\"pentecost\">Pentecost</option>\n                            <option value=\"trinitySunday\">Trinity Sunday</option>\n                            <option value=\"corpusChristi\">Corpus Christi</option>\n                            <option value=\"adventSunday\">Advent Sunday</option>\n                            <option value=\"unknown\">Unknown</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <RomanNumber className={valid ? \"input\" : \"input is-danger\"}\n                        placeholder=\"year\"\n                        value={year}\n                        onChange={this.changeYear.bind(this)} />\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react'\nimport {\n    Calendar,\n    InvalidDateException,\n    HistoricalDate,\n    RomanDate,\n    RomanDay,\n    RomanDays,\n    RomanText,\n    RomanTexts,\n    RomanMonth,\n    RomanMonths,\n    toRomanNumber\n} from 'historical-dates';\nimport { RomanNumber, RomanNumberState } from './roman-number';\n\nexport type RomanDateProps = {\n    onChange: (value: RomanDateProps) => void,\n    calendar: Calendar,\n    day: RomanDay,\n    text: RomanText,\n    month: RomanMonth,\n    year: string,\n    yearType?: RomanNumberState['type'],\n    date?: HistoricalDate,\n    valid?: boolean\n}\n\nexport class RomanDateComponent extends React.Component<RomanDateProps, RomanDateProps> {\n    static defaultProps = {\n        onChange: function () { },\n        calendar: 'gregorian',\n        valid: true\n    }\n\n    constructor(props: RomanDateProps) {\n        super(props);\n        this.state = Object.assign({}, props);\n    }\n\n    componentWillReceiveProps(nextProps: RomanDateProps) {\n        this.setState((prevState, props) => {\n            nextProps = Object.assign({}, props, prevState, nextProps);\n            if (prevState.calendar !== nextProps.calendar) {\n                nextProps = this.parseState(nextProps);\n            }\n            return nextProps;\n        });\n    }\n\n    change = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        let newValue = { [event.target.name]: event.target.value };\n        this.setState((prevState) => {\n            let newState = Object.assign({}, prevState, newValue);\n            return this.parseState(newState);\n        });\n    }\n\n    changeYear(state: RomanNumberState) {\n        this.setState((prevState) => {\n            let newState = Object.assign({}, prevState, { year: state.text, yearType: state.type });\n            return this.parseState(newState, state.type !== 'invalid');\n        });\n    }\n\n    parseState(newState: RomanDateProps, validYear = true) {\n        try {\n            const year = newState.yearType && newState.yearType === 'arabic'\n                ? toRomanNumber(parseInt(newState.year))\n                : newState.year;\n\n            let romanDate = new RomanDate(newState.day, newState.text, newState.month, year, newState.calendar);\n            let date = romanDate.toDate();\n            newState = Object.assign({}, newState, { date, valid: true && validYear });\n        } catch (error) {\n            if (error instanceof InvalidDateException) {\n                newState = Object.assign({}, newState, { valid: false });\n            } else {\n                throw error;\n            }\n        }\n        if (newState.valid) {\n            newState.onChange(newState);\n        }\n        return newState;\n    }\n\n    render() {\n        const {\n            day,\n            text,\n            month,\n            year,\n            valid\n        } = this.state;\n        const selectClassName = valid ? \"select\" : \"select is-danger\",\n            inputClassName = valid ? \"input\" : \"input is-danger\";\n\n        return (\n            <div className=\"field has-addons\">\n                <div className=\"control\">\n                    <div className={selectClassName}>\n                        <select name='day' value={day} onChange={this.change}>\n                            {\n                                Object.keys(RomanDays).map(romanDay =>\n                                    <option key={romanDay} value={romanDay}>{romanDay}</option>)\n                            }\n                        </select>\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <div className={selectClassName}>\n                        <select name='text' value={text} onChange={this.change}>\n                            {\n                                ['', ...Object.keys(RomanTexts)].map(romanText =>\n                                    <option key={romanText} value={romanText}>{romanText}</option>)\n                            }\n                        </select>\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <div className={selectClassName}>\n                        <select name='month' value={month} onChange={this.change}>\n                            {\n                                ['', ...Object.keys(RomanMonths)].map(romanMonth =>\n                                    <option key={romanMonth} value={romanMonth}>{romanMonth}</option>)\n                            }\n                        </select>\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <RomanNumber className={inputClassName} value={year} onChange={this.changeYear.bind(this)} />\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from 'react';\nimport { Calendar, createDate, createDateFromString, RomanDay, RomanText, RomanMonth, RomanDate, InvalidDateException, HistoricalDate } from 'historical-dates';\n\nimport { PlainDate } from './date';\nimport { Holiday, HolidayDay } from './holiday';\nimport { RomanDateComponent } from './roman-date';\n\n/**\n * Only changes in text and onChange are handled after the component\n * has been created!\n */\nexport type DateAnnotatorProps = {\n    calendar: Calendar | 'unknown',\n    text: string,\n    type: undefined | 'plain' | 'holiday' | 'roman',\n    date: HistoricalDate,\n    holiday: HolidayDay,\n    roman: {\n        day: RomanDay,\n        text: RomanText,\n        month: RomanMonth,\n        year: string,\n    },\n    offsetDays: number,\n    onChange: (value: DateAnnotatorProps) => void\n}\n\nexport type DateAnnotatorState = {\n    calendar: Calendar | 'unknown';\n    text: string,\n    type: undefined | 'plain' | 'holiday' | 'roman',\n    date: HistoricalDate,\n    holiday: HolidayDay | 'unknown',\n    roman: {\n        day: RomanDay,\n        text: RomanText,\n        month: RomanMonth,\n        year: string,\n    },\n    offsetDays: number,\n    gregorianDate: HistoricalDate,\n    julianDate: HistoricalDate,\n    yearText: string\n}\n\nexport class DateAnnotatorComponent extends React.Component<DateAnnotatorProps, DateAnnotatorState> {\n    static get defaultProps() {\n        let date = createDate(undefined, undefined, undefined, 'gregorian');\n        let romanDate = RomanDate.fromDate(date);\n\n        return {\n            calendar: 'unknown',\n            date,\n            holiday: 'easter',\n            roman: romanDate,\n            offsetDays: 0,\n            onChange: function () { }\n        }\n    }\n\n    constructor(props: DateAnnotatorProps) {\n        super(props);\n\n        this.state = {\n            calendar: props.calendar,\n            date: props.date,\n            text: props.text,\n            type: props.type,\n            offsetDays: props.offsetDays,\n            holiday: props.holiday,\n            roman: props.roman,\n            gregorianDate: props.date.toGregorian(),\n            julianDate: props.date.toJulian(),\n            yearText: (props.date.year || '').toString()\n        };\n    }\n\n    private deriveState(prevState: DateAnnotatorState, nextProps: any) {\n        let nextState = Object.assign({\n            calendar: prevState.calendar,\n            date: prevState.date,\n            offsetDays: prevState.offsetDays\n        }, nextProps);\n        nextState.offsetDays = parseInt(nextState.offsetDays || '0');\n        let newState: any;\n        let offsetDate = nextState.date.addDays(nextState.offsetDays);\n        newState = Object.assign({}, nextState, {\n            gregorianDate: offsetDate.toGregorian(),\n            julianDate: offsetDate.toJulian()\n        });\n        if (prevState.type !== newState.type ||\n            prevState.calendar !== newState.calendar ||\n            !prevState.gregorianDate.equals(newState.gregorianDate)) {\n            this.emitState(Object.assign(prevState, newState));\n        }\n\n        // make sure the updated value is displayed\n        newState.offsetDays = newState.offsetDays.toString()\n        return newState;\n    }\n\n    private setDerivedState(nextProps: any) {\n        this.setState((prevState) => {\n            return this.deriveState(prevState, nextProps);\n        });\n    }\n\n    private emitState(newState: DateAnnotatorState) {\n        let emitState: any = {\n            calendar: newState.calendar,\n            type: newState.type,\n            offsetDays: newState.offsetDays,\n            gregorianDate: newState.gregorianDate\n        };\n\n        if (newState.calendar === 'julian') {\n            emitState['julianDate'] = newState.julianDate;\n        }\n\n        switch (newState.type) {\n            case 'plain':\n                emitState['date'] = newState.date;\n                break;\n\n            case 'holiday':\n                emitState['holiday'] = newState.holiday;\n                break;\n\n            case 'roman':\n                emitState['roman'] = {\n                    day: newState.roman.day,\n                    text: newState.roman.text,\n                    month: newState.roman.month,\n                    year: newState.roman.year\n                };\n                break;\n        }\n\n        this.props.onChange(emitState);\n    }\n\n    componentWillReceiveProps(nextProps: DateAnnotatorProps) {\n        let liveProps = {\n            text: nextProps.text,\n            type: nextProps.type,\n            onChange: nextProps.onChange\n        }\n        this.setState((prevState) => {\n            if (prevState.text !== liveProps.text && liveProps.text) {\n                let foundDate = false;\n                try {\n                    let date = createDateFromString(liveProps.text, 'gregorian');\n                    liveProps = Object.assign({}, liveProps, {\n                        date,\n                        yearText: (date.year || '').toString(),\n                        type: 'plain'\n                    });\n                    foundDate = true;\n                } catch (exception) {\n                    if (!(exception instanceof InvalidDateException)) {\n                        throw exception;\n                    }\n\n                    // The text couldn't be converted to a date,\n                    // maybe it's a Roman date?\n                }\n\n                if (!foundDate) {\n                    try {\n                        let roman = RomanDate.fromString(liveProps.text, this.state.calendar === 'unknown' ? 'gregorian' : this.state.calendar);\n                        liveProps = Object.assign({}, liveProps, {\n                            roman,\n                            date: roman.toDate(),\n                            type: 'roman'\n                        });\n                    } catch (exception) {\n                        if (!(exception instanceof InvalidDateException)) {\n                            throw exception;\n                        }\n\n                        // The text couldn't be converted to a Roman date,\n                        // so it probably isn't. Nothing to do here.\n                    }\n                }\n            }\n\n            return this.deriveState(prevState, liveProps);\n        });\n    }\n\n    change = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>, clearOffsetDays = false) => {\n        this.setDerivedState({\n            [event.target.name]: event.target.value,\n            ...(clearOffsetDays ? { offsetDays: 0 } : {})\n        });\n    }\n\n    render() {\n        const {\n            calendar,\n            date,\n            holiday,\n            roman,\n            type,\n            offsetDays,\n            gregorianDate,\n            julianDate,\n            yearText\n        } = this.state;\n        let editor;\n        const displayCalendar = calendar !== 'julian' ? 'gregorian' : 'julian';\n        switch (type) {\n            case 'plain':\n                editor = <PlainDate onChange={(data) => {\n                    this.setDerivedState({\n                        date: createDate(data.year, data.month, data.day, data.calendar),\n                        yearText: data.yearText\n                    })\n                }}\n                    calendar={displayCalendar}\n                    day={date.day} month={date.month} year={date.year} yearText={yearText} />;\n                break;\n            case 'holiday':\n                editor = <Holiday onChange={(data) => {\n                    this.setDerivedState({ holiday: data.day, date: data.date, year: data.year })\n                }}\n                    calendar={displayCalendar}\n                    day={holiday}\n                    year={date.year || ''} />;\n                break;\n            case 'roman':\n                editor = <RomanDateComponent\n                    onChange={(data) => {\n                        this.setDerivedState({ roman: data, date: data.date as HistoricalDate });\n                    }}\n                    calendar={displayCalendar}\n                    day={roman.day}\n                    text={roman.text}\n                    month={roman.month}\n                    year={roman.year} />;\n                break;\n        }\n\n        let offsetDaysField: string | JSX.Element = '',\n            offsetDateDisplay: string | JSX.Element = '';\n\n        if (type) {\n            if (type === 'holiday') {\n                offsetDaysField = (<div className=\"field\">\n                    <label className=\"label\">Offset Days</label>\n                    <div className=\"control\">\n                        <input className=\"input\" type=\"number\" placeholder=\"0\" name=\"offsetDays\" value={offsetDays} onChange={this.change} />\n                    </div>\n                </div>);\n            }\n            offsetDateDisplay = <div className=\"columns\">\n                <div className=\"column\">\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <label className=\"radio\">\n                                <input type=\"radio\" name=\"calendar\" onChange={this.change} value=\"gregorian\" checked={calendar === 'gregorian'} />\n                                Gregorian Date (new style)\n                            </label>\n                        </div>\n                    </div>\n                    {gregorianDate.toString()}\n                </div>\n                <div className=\"column\">\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <label className=\"radio\">\n                                <input type=\"radio\" name=\"calendar\" onChange={this.change} value=\"julian\" checked={calendar === 'julian'} />\n                                Julian Date (old style)\n                            </label>\n                        </div>\n                    </div>\n                    {julianDate.toString()}\n                </div>\n                <div className=\"column\">\n                    <div className=\"field\">\n                        <div className=\"control\">\n                            <label className=\"radio\">\n                                <input type=\"radio\" name=\"calendar\" onChange={this.change} value=\"unknown\" checked={calendar === 'unknown'} />\n                                Unknown\n                            </label>\n                        </div>\n                    </div>\n                    {gregorianDate.toString()}\n                </div>\n            </div>\n        }\n\n        return (\n            <div>\n                <div className=\"field\">\n                    <div className=\"control\">\n                        <label className=\"radio\">\n                            <input type=\"radio\" name=\"type\" onChange={e => this.change(e, true)} value=\"plain\" checked={type === 'plain'} />\n                            Plain date\n                        </label>\n                        <label className=\"radio\">\n                            <input type=\"radio\" name=\"type\" onChange={this.change} value=\"holiday\" checked={type === 'holiday'} />\n                            Holiday\n                        </label>\n                        <label className=\"radio\">\n                            <input type=\"radio\" name=\"type\" onChange={e => this.change(e, true)} value=\"roman\" checked={type === 'roman'} />\n                            Roman date\n                        </label>\n                        <label className=\"radio\">\n                            <input type=\"radio\" name=\"type\" onChange={e => this.change(e, true)} value={undefined} checked={!type} />\n                            Other/Unknown\n                        </label>\n                    </div>\n                </div>\n                {editor}\n                {offsetDaysField}\n                {offsetDateDisplay}\n            </div>\n        )\n    }\n}\n","import 'react-app-polyfill/ie11';\nimport trimLeft from 'string.prototype.trimleft';\nif (!String.prototype.trimLeft) {\n    trimLeft.shim();\n}\n\nexport * from './date';\nexport * from './date-annotator';\nexport * from './holiday';\nexport * from './roman-date';\n","import React, { Component } from 'react'\n\nimport { DateAnnotatorComponent } from './lib'\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = Object.assign({ text: '', data: '' }, props);\n        this.changeText = this.changeText.bind(this);\n        this.displayState = this.displayState.bind(this);\n    }\n\n    changeText(event) {\n        let text = event.target.value;\n        this.setState((prevState) => ({\n            data: Object.assign({}, prevState.data, { text }),\n            text\n        }));\n    }\n\n    displayState(data) {\n        this.setState({\n            data\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"card\">\n                    <div className=\"card-content\">\n                        <div className=\"field\">\n                            <label className=\"label\">Transcribed Date</label>\n                            <input className=\"input\" type=\"text\" value={this.state.text} onChange={this.changeText} />\n                        </div>\n                        <DateAnnotatorComponent text={this.state.text} type={this.state.data.type} onChange={this.displayState} />\n                    </div>\n                </div>\n                <br />\n                <pre className=\"code\">{JSON.stringify(this.state.data, null, 4)}</pre>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}